Description: backport of dpdk 16.04-rc1 fix for LP: #1559981

Forwarded: n/a (already upstream)
Author: Christian Ehrhardt <christian.ehrhardt@canonical.com>
Last-Update: 2016-03-20

From 16c1814c802c205f6d3c32e3d3d10de9f87e7f22 Mon Sep 17 00:00:00 2001
From: Dawid Jurczak <dawid_jurek@vp.pl>
Date: Wed, 27 Jan 2016 20:59:44 +0100
Subject: [PATCH] tools: support Python 3 in bind script

This patch fixes syntax errors during binding ethernet device
on systems where Python 3 is default.
Backward compatibility with Python 2 is preserved.

Signed-off-by: Dawid Jurczak <dawid_jurek@vp.pl>
---
 tools/dpdk_nic_bind.py | 74 +++++++++++++++++++++++++-------------------------
 1 file changed, 37 insertions(+), 37 deletions(-)

diff --git a/tools/dpdk_nic_bind.py b/tools/dpdk_nic_bind.py
index a1923c5..dfefdae 100755
--- a/tools/dpdk_nic_bind.py
+++ b/tools/dpdk_nic_bind.py
@@ -54,7 +54,7 @@ args = []
 def usage():
     '''Print usage information for the program'''
     argv0 = basename(sys.argv[0])
-    print """
+    print ("""
 Usage:
 ------
 
@@ -110,7 +110,7 @@ To unbind 0000:01:00.0 from using any driver
 To bind 0000:02:00.0 and 0000:02:00.1 to the ixgbe kernel driver
         %(argv0)s -b ixgbe 02:00.0 02:00.1
 
-    """ % locals() # replace items from local variables
+    """ % locals()) # replace items from local variables
 
 # This is roughly compatible with check_output function in subprocess module
 # which is only available in python 2.7.
@@ -156,7 +156,7 @@ def check_modules():
     '''Checks that igb_uio is loaded'''
     global dpdk_drivers
 
-    fd = file("/proc/modules")
+    fd = open("/proc/modules", 'r')
     loaded_mods = fd.readlines()
     fd.close()
 
@@ -176,10 +176,10 @@ def check_modules():
     # check if we have at least one loaded module
     if True not in [mod["Found"] for mod in mods] and b_flag is not None:
         if b_flag in dpdk_drivers:
-            print "Error - no supported modules(DPDK driver) are loaded"
+            print ("Error - no supported modules(DPDK driver) are loaded")
             sys.exit(1)
         else:
-            print "Warning - no supported modules(DPDK driver) are loaded"
+            print ("Warning - no supported modules(DPDK driver) are loaded")
 
     # change DPDK driver list to only contain drivers that are loaded
     dpdk_drivers = [mod["Name"] for mod in mods if mod["Found"]]
@@ -198,7 +198,7 @@ def get_pci_device_details(dev_id):
     for line in extra_info:
         if len(line) == 0:
             continue
-        name, value = line.split("\t", 1)
+        name, value = line.decode().split("\t", 1)
         name = name.strip(":") + "_str"
         device[name] = value
     # check for a unix interface name
@@ -234,7 +234,7 @@ def get_nic_details():
                 dev["Device"] = int(dev["Device"],16)
                 devices[dev["Slot"]] = dict(dev) # use dict to make copy of dev
         else:
-            name, value = dev_line.split("\t", 1)
+            name, value = dev_line.decode().split("\t", 1)
             dev[name.rstrip(":")] = value
 
     # check what is the interface if any for an ssh connection if
@@ -243,17 +243,17 @@ def get_nic_details():
     route = check_output(["ip", "-o", "route"])
     # filter out all lines for 169.254 routes
     route = "\n".join(filter(lambda ln: not ln.startswith("169.254"),
-                             route.splitlines()))
+                             route.decode().splitlines()))
     rt_info = route.split()
-    for i in xrange(len(rt_info) - 1):
+    for i in range(len(rt_info) - 1):
         if rt_info[i] == "dev":
             ssh_if.append(rt_info[i+1])
 
     # based on the basic info, get extended text details
     for d in devices.keys():
         # get additional info and add it to existing data
-        devices[d] = dict(devices[d].items() +
-                          get_pci_device_details(d).items())
+        devices[d] = devices[d].copy()
+        devices[d].update(get_pci_device_details(d).items())
 
         for _if in ssh_if:
             if _if in devices[d]["Interface"].split(","):
@@ -293,22 +293,22 @@ def dev_id_from_dev_name(dev_name):
             if dev_name in devices[d]["Interface"].split(","):
                 return devices[d]["Slot"]
     # if nothing else matches - error
-    print "Unknown device: %s. " \
-        "Please specify device in \"bus:slot.func\" format" % dev_name
+    print ("Unknown device: %s. " \
+        "Please specify device in \"bus:slot.func\" format" % dev_name)
     sys.exit(1)
 
 def unbind_one(dev_id, force):
     '''Unbind the device identified by "dev_id" from its current driver'''
     dev = devices[dev_id]
     if not has_driver(dev_id):
-        print "%s %s %s is not currently managed by any driver\n" % \
-            (dev["Slot"], dev["Device_str"], dev["Interface"])
+        print ("%s %s %s is not currently managed by any driver\n" % \
+            (dev["Slot"], dev["Device_str"], dev["Interface"]))
         return
 
     # prevent us disconnecting ourselves
     if dev["Ssh_if"] and not force:
-        print "Routing table indicates that interface %s is active" \
-            ". Skipping unbind" % (dev_id)
+        print ("Routing table indicates that interface %s is active" \
+            ". Skipping unbind" % (dev_id))
         return
 
     # write to /sys to unbind
@@ -316,7 +316,7 @@ def unbind_one(dev_id, force):
     try:
         f = open(filename, "a")
     except:
-        print "Error: unbind failed for %s - Cannot open %s" % (dev_id, filename)
+        print ("Error: unbind failed for %s - Cannot open %s" % (dev_id, filename))
         sys.exit(1)
     f.write(dev_id)
     f.close()
@@ -329,14 +329,14 @@ def bind_one(dev_id, driver, force):
 
     # prevent disconnection of our ssh session
     if dev["Ssh_if"] and not force:
-        print "Routing table indicates that interface %s is active" \
-            ". Not modifying" % (dev_id)
+        print ("Routing table indicates that interface %s is active" \
+            ". Not modifying" % (dev_id))
         return
 
     # unbind any existing drivers we don't want
     if has_driver(dev_id):
         if dev["Driver_str"] == driver:
-            print "%s already bound to driver %s, skipping\n" % (dev_id, driver)
+            print ("%s already bound to driver %s, skipping\n" % (dev_id, driver))
             return
         else:
             saved_driver = dev["Driver_str"]
@@ -349,14 +349,14 @@ def bind_one(dev_id, driver, force):
         try:
             f = open(filename, "w")
         except:
-            print "Error: bind failed for %s - Cannot open %s" % (dev_id, filename)
+            print ("Error: bind failed for %s - Cannot open %s" % (dev_id, filename))
             return
         try:
             f.write("%04x %04x" % (dev["Vendor"], dev["Device"]))
             f.close()
         except:
-            print "Error: bind failed for %s - Cannot write new PCI ID to " \
-                "driver %s" % (dev_id, driver)
+            print ("Error: bind failed for %s - Cannot write new PCI ID to " \
+                "driver %s" % (dev_id, driver))
             return
 
     # do the bind by writing to /sys
@@ -364,7 +364,7 @@ def bind_one(dev_id, driver, force):
     try:
         f = open(filename, "a")
     except:
-        print "Error: bind failed for %s - Cannot open %s" % (dev_id, filename)
+        print ("Error: bind failed for %s - Cannot open %s" % (dev_id, filename))
         if saved_driver is not None: # restore any previous driver
             bind_one(dev_id, saved_driver, force)
         return
@@ -378,7 +378,7 @@ def bind_one(dev_id, driver, force):
         tmp = get_pci_device_details(dev_id)
         if "Driver_str" in tmp and tmp["Driver_str"] == driver:
             return
-        print "Error: bind failed for %s - Cannot bind to driver %s" % (dev_id, driver)
+        print ("Error: bind failed for %s - Cannot bind to driver %s" % (dev_id, driver))
         if saved_driver is not None: # restore any previous driver
             bind_one(dev_id, saved_driver, force)
         return
@@ -423,8 +423,8 @@ def display_devices(title, dev_list, extra_params = None):
     %()s fields in it for replacement by the named fields in each device's
     dictionary.'''
     strings = [] # this holds the strings to print. We sort before printing
-    print "\n%s" % title
-    print   "="*len(title)
+    print ("\n%s" % title)
+    print   ("="*len(title))
     if len(dev_list) == 0:
         strings.append("<none>")
     else:
@@ -436,7 +436,7 @@ def display_devices(title, dev_list, extra_params = None):
                 strings.append("%s '%s'" % (dev["Slot"], dev["Device_str"]))
     # sort before printing, so that the entries appear in PCI order
     strings.sort()
-    print "\n".join(strings) # print one per line
+    print ("\n".join(strings)) # print one per line
 
 def show_status():
     '''Function called when the script is passed the "--status" option. Displays
@@ -480,9 +480,9 @@ def parse_args():
         opts, args = getopt.getopt(sys.argv[1:], "b:us",
                                ["help", "usage", "status", "force",
                                 "bind=", "unbind"])
-    except getopt.GetoptError, error:
-        print str(error)
-        print "Run '%s --usage' for further information" % sys.argv[0]
+    except (getopt.GetoptError, error):
+        print (str(error))
+        print ("Run '%s --usage' for further information" % sys.argv[0])
         sys.exit(1)
 
     for opt, arg in opts:
@@ -495,7 +495,7 @@ def parse_args():
             force_flag = True
         if opt == "-b" or opt == "-u" or opt == "--bind" or opt == "--unbind":
             if b_flag is not None:
-                print "Error - Only one bind or unbind may be specified\n"
+                print ("Error - Only one bind or unbind may be specified\n")
                 sys.exit(1)
             if opt == "-u" or opt == "--unbind":
                 b_flag = "none"
@@ -510,13 +510,13 @@ def do_arg_actions():
     global args
 
     if b_flag is None and not status_flag:
-        print "Error: No action specified for devices. Please give a -b or -u option"
-        print "Run '%s --usage' for further information" % sys.argv[0]
+        print ("Error: No action specified for devices. Please give a -b or -u option")
+        print ("Run '%s --usage' for further information" % sys.argv[0])
         sys.exit(1)
 
     if b_flag is not None and len(args) == 0:
-        print "Error: No devices specified."
-        print "Run '%s --usage' for further information" % sys.argv[0]
+        print ("Error: No devices specified.")
+        print ("Run '%s --usage' for further information" % sys.argv[0])
         sys.exit(1)
 
     if b_flag == "none" or b_flag == "None":
-- 
2.7.3

